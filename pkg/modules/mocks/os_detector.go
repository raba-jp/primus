// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OSDetector is an autogenerated mock type for the OSDetector type
type OSDetector struct {
	mock.Mock
}

type OSDetectorArchLinuxArgs struct {
	Ctx         context.Context
	CtxAnything bool
}

type OSDetectorArchLinuxReturns struct {
	V bool
}

type OSDetectorArchLinuxExpectation struct {
	Args    OSDetectorArchLinuxArgs
	Returns OSDetectorArchLinuxReturns
}

func (_m *OSDetector) ApplyArchLinuxExpectation(e OSDetectorArchLinuxExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	_m.On("ArchLinux", args...).Return(e.Returns.V)
}

func (_m *OSDetector) ApplyArchLinuxExpectations(expectations []OSDetectorArchLinuxExpectation) {
	for _, e := range expectations {
		_m.ApplyArchLinuxExpectation(e)
	}
}

// ArchLinux provides a mock function with given fields: ctx
func (_m *OSDetector) ArchLinux(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type OSDetectorDarwinArgs struct {
	Ctx         context.Context
	CtxAnything bool
}

type OSDetectorDarwinReturns struct {
	V bool
}

type OSDetectorDarwinExpectation struct {
	Args    OSDetectorDarwinArgs
	Returns OSDetectorDarwinReturns
}

func (_m *OSDetector) ApplyDarwinExpectation(e OSDetectorDarwinExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	_m.On("Darwin", args...).Return(e.Returns.V)
}

func (_m *OSDetector) ApplyDarwinExpectations(expectations []OSDetectorDarwinExpectation) {
	for _, e := range expectations {
		_m.ApplyDarwinExpectation(e)
	}
}

// Darwin provides a mock function with given fields: ctx
func (_m *OSDetector) Darwin(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
