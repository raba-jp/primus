// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/handlers (interfaces: CheckInstallHandler,InstallHandler,UninstallHandler,FileCopyHandler,FileMoveHandler,SymlinkHandler,HTTPRequestHandler,CommandHandler,FishSetVariableHandler,FishSetPathHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/raba-jp/primus/pkg/handlers"
	reflect "reflect"
)

// MockCheckInstallHandler is a mock of CheckInstallHandler interface
type MockCheckInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCheckInstallHandlerMockRecorder
}

// MockCheckInstallHandlerMockRecorder is the mock recorder for MockCheckInstallHandler
type MockCheckInstallHandlerMockRecorder struct {
	mock *MockCheckInstallHandler
}

// NewMockCheckInstallHandler creates a new mock instance
func NewMockCheckInstallHandler(ctrl *gomock.Controller) *MockCheckInstallHandler {
	mock := &MockCheckInstallHandler{ctrl: ctrl}
	mock.recorder = &MockCheckInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckInstallHandler) EXPECT() *MockCheckInstallHandlerMockRecorder {
	return m.recorder
}

// CheckInstall mocks base method
func (m *MockCheckInstallHandler) CheckInstall(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstall", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckInstall indicates an expected call of CheckInstall
func (mr *MockCheckInstallHandlerMockRecorder) CheckInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstall", reflect.TypeOf((*MockCheckInstallHandler)(nil).CheckInstall), arg0, arg1)
}

// MockInstallHandler is a mock of InstallHandler interface
type MockInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInstallHandlerMockRecorder
}

// MockInstallHandlerMockRecorder is the mock recorder for MockInstallHandler
type MockInstallHandlerMockRecorder struct {
	mock *MockInstallHandler
}

// NewMockInstallHandler creates a new mock instance
func NewMockInstallHandler(ctrl *gomock.Controller) *MockInstallHandler {
	mock := &MockInstallHandler{ctrl: ctrl}
	mock.recorder = &MockInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallHandler) EXPECT() *MockInstallHandlerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInstallHandler) Install(arg0 context.Context, arg1 bool, arg2 *handlers.InstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallHandlerMockRecorder) Install(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstallHandler)(nil).Install), arg0, arg1, arg2)
}

// MockUninstallHandler is a mock of UninstallHandler interface
type MockUninstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUninstallHandlerMockRecorder
}

// MockUninstallHandlerMockRecorder is the mock recorder for MockUninstallHandler
type MockUninstallHandlerMockRecorder struct {
	mock *MockUninstallHandler
}

// NewMockUninstallHandler creates a new mock instance
func NewMockUninstallHandler(ctrl *gomock.Controller) *MockUninstallHandler {
	mock := &MockUninstallHandler{ctrl: ctrl}
	mock.recorder = &MockUninstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUninstallHandler) EXPECT() *MockUninstallHandlerMockRecorder {
	return m.recorder
}

// Uninstall mocks base method
func (m *MockUninstallHandler) Uninstall(arg0 context.Context, arg1 bool, arg2 *handlers.UninstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall
func (mr *MockUninstallHandlerMockRecorder) Uninstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockUninstallHandler)(nil).Uninstall), arg0, arg1, arg2)
}

// MockFileCopyHandler is a mock of FileCopyHandler interface
type MockFileCopyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileCopyHandlerMockRecorder
}

// MockFileCopyHandlerMockRecorder is the mock recorder for MockFileCopyHandler
type MockFileCopyHandlerMockRecorder struct {
	mock *MockFileCopyHandler
}

// NewMockFileCopyHandler creates a new mock instance
func NewMockFileCopyHandler(ctrl *gomock.Controller) *MockFileCopyHandler {
	mock := &MockFileCopyHandler{ctrl: ctrl}
	mock.recorder = &MockFileCopyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileCopyHandler) EXPECT() *MockFileCopyHandlerMockRecorder {
	return m.recorder
}

// FileCopy mocks base method
func (m *MockFileCopyHandler) FileCopy(arg0 context.Context, arg1 bool, arg2 *handlers.FileCopyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileCopy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileCopy indicates an expected call of FileCopy
func (mr *MockFileCopyHandlerMockRecorder) FileCopy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCopy", reflect.TypeOf((*MockFileCopyHandler)(nil).FileCopy), arg0, arg1, arg2)
}

// MockFileMoveHandler is a mock of FileMoveHandler interface
type MockFileMoveHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileMoveHandlerMockRecorder
}

// MockFileMoveHandlerMockRecorder is the mock recorder for MockFileMoveHandler
type MockFileMoveHandlerMockRecorder struct {
	mock *MockFileMoveHandler
}

// NewMockFileMoveHandler creates a new mock instance
func NewMockFileMoveHandler(ctrl *gomock.Controller) *MockFileMoveHandler {
	mock := &MockFileMoveHandler{ctrl: ctrl}
	mock.recorder = &MockFileMoveHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileMoveHandler) EXPECT() *MockFileMoveHandlerMockRecorder {
	return m.recorder
}

// FileMove mocks base method
func (m *MockFileMoveHandler) FileMove(arg0 context.Context, arg1 bool, arg2 *handlers.FileMoveParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileMove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileMove indicates an expected call of FileMove
func (mr *MockFileMoveHandlerMockRecorder) FileMove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileMove", reflect.TypeOf((*MockFileMoveHandler)(nil).FileMove), arg0, arg1, arg2)
}

// MockSymlinkHandler is a mock of SymlinkHandler interface
type MockSymlinkHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSymlinkHandlerMockRecorder
}

// MockSymlinkHandlerMockRecorder is the mock recorder for MockSymlinkHandler
type MockSymlinkHandlerMockRecorder struct {
	mock *MockSymlinkHandler
}

// NewMockSymlinkHandler creates a new mock instance
func NewMockSymlinkHandler(ctrl *gomock.Controller) *MockSymlinkHandler {
	mock := &MockSymlinkHandler{ctrl: ctrl}
	mock.recorder = &MockSymlinkHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSymlinkHandler) EXPECT() *MockSymlinkHandlerMockRecorder {
	return m.recorder
}

// Symlink mocks base method
func (m *MockSymlinkHandler) Symlink(arg0 context.Context, arg1 bool, arg2 *handlers.SymlinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Symlink indicates an expected call of Symlink
func (mr *MockSymlinkHandlerMockRecorder) Symlink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockSymlinkHandler)(nil).Symlink), arg0, arg1, arg2)
}

// MockHTTPRequestHandler is a mock of HTTPRequestHandler interface
type MockHTTPRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRequestHandlerMockRecorder
}

// MockHTTPRequestHandlerMockRecorder is the mock recorder for MockHTTPRequestHandler
type MockHTTPRequestHandlerMockRecorder struct {
	mock *MockHTTPRequestHandler
}

// NewMockHTTPRequestHandler creates a new mock instance
func NewMockHTTPRequestHandler(ctrl *gomock.Controller) *MockHTTPRequestHandler {
	mock := &MockHTTPRequestHandler{ctrl: ctrl}
	mock.recorder = &MockHTTPRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPRequestHandler) EXPECT() *MockHTTPRequestHandlerMockRecorder {
	return m.recorder
}

// HTTPRequest mocks base method
func (m *MockHTTPRequestHandler) HTTPRequest(arg0 context.Context, arg1 bool, arg2 *handlers.HTTPRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HTTPRequest indicates an expected call of HTTPRequest
func (mr *MockHTTPRequestHandlerMockRecorder) HTTPRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRequest", reflect.TypeOf((*MockHTTPRequestHandler)(nil).HTTPRequest), arg0, arg1, arg2)
}

// MockCommandHandler is a mock of CommandHandler interface
type MockCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommandHandlerMockRecorder
}

// MockCommandHandlerMockRecorder is the mock recorder for MockCommandHandler
type MockCommandHandlerMockRecorder struct {
	mock *MockCommandHandler
}

// NewMockCommandHandler creates a new mock instance
func NewMockCommandHandler(ctrl *gomock.Controller) *MockCommandHandler {
	mock := &MockCommandHandler{ctrl: ctrl}
	mock.recorder = &MockCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandHandler) EXPECT() *MockCommandHandlerMockRecorder {
	return m.recorder
}

// Command mocks base method
func (m *MockCommandHandler) Command(arg0 context.Context, arg1 bool, arg2 *handlers.CommandParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockCommandHandlerMockRecorder) Command(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockCommandHandler)(nil).Command), arg0, arg1, arg2)
}

// MockFishSetVariableHandler is a mock of FishSetVariableHandler interface
type MockFishSetVariableHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFishSetVariableHandlerMockRecorder
}

// MockFishSetVariableHandlerMockRecorder is the mock recorder for MockFishSetVariableHandler
type MockFishSetVariableHandlerMockRecorder struct {
	mock *MockFishSetVariableHandler
}

// NewMockFishSetVariableHandler creates a new mock instance
func NewMockFishSetVariableHandler(ctrl *gomock.Controller) *MockFishSetVariableHandler {
	mock := &MockFishSetVariableHandler{ctrl: ctrl}
	mock.recorder = &MockFishSetVariableHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFishSetVariableHandler) EXPECT() *MockFishSetVariableHandlerMockRecorder {
	return m.recorder
}

// FishSetVariable mocks base method
func (m *MockFishSetVariableHandler) FishSetVariable(arg0 context.Context, arg1 bool, arg2 *handlers.FishSetVariableParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FishSetVariable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FishSetVariable indicates an expected call of FishSetVariable
func (mr *MockFishSetVariableHandlerMockRecorder) FishSetVariable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FishSetVariable", reflect.TypeOf((*MockFishSetVariableHandler)(nil).FishSetVariable), arg0, arg1, arg2)
}

// MockFishSetPathHandler is a mock of FishSetPathHandler interface
type MockFishSetPathHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFishSetPathHandlerMockRecorder
}

// MockFishSetPathHandlerMockRecorder is the mock recorder for MockFishSetPathHandler
type MockFishSetPathHandlerMockRecorder struct {
	mock *MockFishSetPathHandler
}

// NewMockFishSetPathHandler creates a new mock instance
func NewMockFishSetPathHandler(ctrl *gomock.Controller) *MockFishSetPathHandler {
	mock := &MockFishSetPathHandler{ctrl: ctrl}
	mock.recorder = &MockFishSetPathHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFishSetPathHandler) EXPECT() *MockFishSetPathHandlerMockRecorder {
	return m.recorder
}

// FishSetPath mocks base method
func (m *MockFishSetPathHandler) FishSetPath(arg0 context.Context, arg1 bool, arg2 *handlers.FishSetPathParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FishSetPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FishSetPath indicates an expected call of FishSetPath
func (mr *MockFishSetPathHandlerMockRecorder) FishSetPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FishSetPath", reflect.TypeOf((*MockFishSetPathHandler)(nil).FishSetPath), arg0, arg1, arg2)
}
