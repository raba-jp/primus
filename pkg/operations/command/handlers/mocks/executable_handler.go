// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ExecutableHandler is an autogenerated mock type for the ExecutableHandler type
type ExecutableHandler struct {
	mock.Mock
}

type ExecutableHandlerRunArgs struct {
	Ctx          context.Context
	CtxAnything  bool
	Name         string
	NameAnything bool
}

type ExecutableHandlerRunReturns struct {
	Ok bool
}

type ExecutableHandlerRunExpectation struct {
	Args    ExecutableHandlerRunArgs
	Returns ExecutableHandlerRunReturns
}

func (_m *ExecutableHandler) ApplyRunExpectation(e ExecutableHandlerRunExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.NameAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Name)
	}
	_m.On("Run", args...).Return(e.Returns.Ok)
}

func (_m *ExecutableHandler) ApplyRunExpectations(expectations []ExecutableHandlerRunExpectation) {
	for _, e := range expectations {
		_m.ApplyRunExpectation(e)
	}
}

// Run provides a mock function with given fields: ctx, name
func (_m *ExecutableHandler) Run(ctx context.Context, name string) bool {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
