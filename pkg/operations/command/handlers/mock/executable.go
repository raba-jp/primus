// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/command/handlers (interfaces: ExecutableHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutableHandler is a mock of ExecutableHandler interface
type MockExecutableHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExecutableHandlerMockRecorder
}

// MockExecutableHandlerMockRecorder is the mock recorder for MockExecutableHandler
type MockExecutableHandlerMockRecorder struct {
	mock *MockExecutableHandler
}

// NewMockExecutableHandler creates a new mock instance
func NewMockExecutableHandler(ctrl *gomock.Controller) *MockExecutableHandler {
	mock := &MockExecutableHandler{ctrl: ctrl}
	mock.recorder = &MockExecutableHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutableHandler) EXPECT() *MockExecutableHandlerMockRecorder {
	return m.recorder
}

// Executable mocks base method
func (m *MockExecutableHandler) Executable(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Executable indicates an expected call of Executable
func (mr *MockExecutableHandlerMockRecorder) Executable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockExecutableHandler)(nil).Executable), arg0, arg1)
}
