// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/systemd/handlers (interfaces: StartServiceHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStartServiceHandler is a mock of StartServiceHandler interface
type MockStartServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStartServiceHandlerMockRecorder
}

// MockStartServiceHandlerMockRecorder is the mock recorder for MockStartServiceHandler
type MockStartServiceHandlerMockRecorder struct {
	mock *MockStartServiceHandler
}

// NewMockStartServiceHandler creates a new mock instance
func NewMockStartServiceHandler(ctrl *gomock.Controller) *MockStartServiceHandler {
	mock := &MockStartServiceHandler{ctrl: ctrl}
	mock.recorder = &MockStartServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStartServiceHandler) EXPECT() *MockStartServiceHandlerMockRecorder {
	return m.recorder
}

// StartService mocks base method
func (m *MockStartServiceHandler) StartService(arg0 context.Context, arg1 bool, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartService indicates an expected call of StartService
func (mr *MockStartServiceHandlerMockRecorder) StartService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockStartServiceHandler)(nil).StartService), arg0, arg1, arg2)
}
