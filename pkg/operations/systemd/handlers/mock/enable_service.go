// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/systemd/handlers (interfaces: EnableServiceHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEnableServiceHandler is a mock of EnableServiceHandler interface
type MockEnableServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEnableServiceHandlerMockRecorder
}

// MockEnableServiceHandlerMockRecorder is the mock recorder for MockEnableServiceHandler
type MockEnableServiceHandlerMockRecorder struct {
	mock *MockEnableServiceHandler
}

// NewMockEnableServiceHandler creates a new mock instance
func NewMockEnableServiceHandler(ctrl *gomock.Controller) *MockEnableServiceHandler {
	mock := &MockEnableServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEnableServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnableServiceHandler) EXPECT() *MockEnableServiceHandlerMockRecorder {
	return m.recorder
}

// EnableService mocks base method
func (m *MockEnableServiceHandler) EnableService(arg0 context.Context, arg1 bool, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService
func (mr *MockEnableServiceHandlerMockRecorder) EnableService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockEnableServiceHandler)(nil).EnableService), arg0, arg1, arg2)
}
