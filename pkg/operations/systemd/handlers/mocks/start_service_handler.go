// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StartServiceHandler is an autogenerated mock type for the StartServiceHandler type
type StartServiceHandler struct {
	mock.Mock
}

type StartServiceHandlerRunArgs struct {
	Ctx          context.Context
	CtxAnything  bool
	Name         string
	NameAnything bool
}

type StartServiceHandlerRunReturns struct {
	Err error
}

type StartServiceHandlerRunExpectation struct {
	Args    StartServiceHandlerRunArgs
	Returns StartServiceHandlerRunReturns
}

func (_m *StartServiceHandler) ApplyRunExpectation(e StartServiceHandlerRunExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.NameAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Name)
	}
	_m.On("Run", args...).Return(e.Returns.Err)
}

func (_m *StartServiceHandler) ApplyRunExpectations(expectations []StartServiceHandlerRunExpectation) {
	for _, e := range expectations {
		_m.ApplyRunExpectation(e)
	}
}

// Run provides a mock function with given fields: ctx, name
func (_m *StartServiceHandler) Run(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
