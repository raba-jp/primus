// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/vscode/handlers (interfaces: InstallExtensionHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/raba-jp/primus/pkg/operations/vscode/handlers"
	reflect "reflect"
)

// MockInstallExtensionHandler is a mock of InstallExtensionHandler interface
type MockInstallExtensionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInstallExtensionHandlerMockRecorder
}

// MockInstallExtensionHandlerMockRecorder is the mock recorder for MockInstallExtensionHandler
type MockInstallExtensionHandlerMockRecorder struct {
	mock *MockInstallExtensionHandler
}

// NewMockInstallExtensionHandler creates a new mock instance
func NewMockInstallExtensionHandler(ctrl *gomock.Controller) *MockInstallExtensionHandler {
	mock := &MockInstallExtensionHandler{ctrl: ctrl}
	mock.recorder = &MockInstallExtensionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallExtensionHandler) EXPECT() *MockInstallExtensionHandlerMockRecorder {
	return m.recorder
}

// InstallExtension mocks base method
func (m *MockInstallExtensionHandler) InstallExtension(arg0 context.Context, arg1 bool, arg2 *handlers.InstallExtensionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallExtension", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallExtension indicates an expected call of InstallExtension
func (mr *MockInstallExtensionHandlerMockRecorder) InstallExtension(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallExtension", reflect.TypeOf((*MockInstallExtensionHandler)(nil).InstallExtension), arg0, arg1, arg2)
}
