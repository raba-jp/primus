// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package packages

import (
	"github.com/raba-jp/primus/pkg/backend"
	"github.com/raba-jp/primus/pkg/operations/packages/handlers"
	"github.com/raba-jp/primus/pkg/operations/packages/starlarkfn"
	"go.starlark.net/starlark"
)

// Injectors from wire.go:

func DarwinPkgCheckInstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	fs := backend.NewFs()
	darwinPkgCheckInstallHandler := handlers.NewDarwinPkgCheckInstallHandler(execInterface, fs)
	v := starlarkfn.DarwinPkgCheckInstall(darwinPkgCheckInstallHandler)
	return v
}

func DarwinPkgInstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	fs := backend.NewFs()
	darwinPkgInstallHandler := handlers.NewDarwinPkgInstallHandler(execInterface, fs)
	v := starlarkfn.DarwinPkgInstall(darwinPkgInstallHandler)
	return v
}

func DarwinPkgUninstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	fs := backend.NewFs()
	darwinPkgUninstallHandler := handlers.NewDarwinPkgUninstallHandler(execInterface, fs)
	v := starlarkfn.DarwinPkgUninstall(darwinPkgUninstallHandler)
	return v
}

func ArchPkgCheckInstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	archPkgCheckInstallHandler := handlers.NewArchPkgCheckInstallHandler(execInterface)
	v := starlarkfn.ArchPkgCheckInstall(archPkgCheckInstallHandler)
	return v
}

func ArchPkgInstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	archPkgInstallHandler := handlers.NewArchPkgInstallHandler(execInterface)
	v := starlarkfn.ArchPkgInstall(archPkgInstallHandler)
	return v
}

func ArchPkgUninstall() func(thread *starlark.Thread, b *starlark.Builtin, args starlark.Tuple, kargs []starlark.Tuple) (starlark.Value, error) {
	execInterface := backend.NewExecInterface()
	archPkgUninstallHandler := handlers.NewArchPkgUninstallHandler(execInterface)
	v := starlarkfn.ArchPkgUninstall(archPkgUninstallHandler)
	return v
}
