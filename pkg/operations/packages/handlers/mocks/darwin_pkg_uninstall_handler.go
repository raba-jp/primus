// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	handlers "github.com/raba-jp/primus/pkg/operations/packages/handlers"
	mock "github.com/stretchr/testify/mock"
)

// DarwinPkgUninstallHandler is an autogenerated mock type for the DarwinPkgUninstallHandler type
type DarwinPkgUninstallHandler struct {
	mock.Mock
}

type DarwinPkgUninstallHandlerUninstallArgs struct {
	Ctx            context.Context
	CtxAnything    bool
	Dryrun         bool
	DryrunAnything bool
	P              *handlers.DarwinPkgUninstallParams
	PAnything      bool
}

type DarwinPkgUninstallHandlerUninstallReturns struct {
	Err error
}

type DarwinPkgUninstallHandlerUninstallExpectation struct {
	Args    DarwinPkgUninstallHandlerUninstallArgs
	Returns DarwinPkgUninstallHandlerUninstallReturns
}

func (_m *DarwinPkgUninstallHandler) ApplyUninstallExpectation(e DarwinPkgUninstallHandlerUninstallExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.DryrunAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Dryrun)
	}
	if e.Args.PAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.P)
	}
	_m.On("Uninstall", args...).Return(e.Returns.Err)
}

func (_m *DarwinPkgUninstallHandler) ApplyUninstallExpectations(expectations []DarwinPkgUninstallHandlerUninstallExpectation) {
	for _, e := range expectations {
		_m.ApplyUninstallExpectation(e)
	}
}

// Uninstall provides a mock function with given fields: ctx, dryrun, p
func (_m *DarwinPkgUninstallHandler) Uninstall(ctx context.Context, dryrun bool, p *handlers.DarwinPkgUninstallParams) error {
	ret := _m.Called(ctx, dryrun, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, *handlers.DarwinPkgUninstallParams) error); ok {
		r0 = rf(ctx, dryrun, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
