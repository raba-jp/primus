// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/packages/handlers (interfaces: CheckInstallHandler,InstallHandler,UninstallHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/raba-jp/primus/pkg/operations/packages/handlers"
	reflect "reflect"
)

// MockCheckInstallHandler is a mock of CheckInstallHandler interface
type MockCheckInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCheckInstallHandlerMockRecorder
}

// MockCheckInstallHandlerMockRecorder is the mock recorder for MockCheckInstallHandler
type MockCheckInstallHandlerMockRecorder struct {
	mock *MockCheckInstallHandler
}

// NewMockCheckInstallHandler creates a new mock instance
func NewMockCheckInstallHandler(ctrl *gomock.Controller) *MockCheckInstallHandler {
	mock := &MockCheckInstallHandler{ctrl: ctrl}
	mock.recorder = &MockCheckInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckInstallHandler) EXPECT() *MockCheckInstallHandlerMockRecorder {
	return m.recorder
}

// CheckInstall mocks base method
func (m *MockCheckInstallHandler) CheckInstall(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstall", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckInstall indicates an expected call of CheckInstall
func (mr *MockCheckInstallHandlerMockRecorder) CheckInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstall", reflect.TypeOf((*MockCheckInstallHandler)(nil).CheckInstall), arg0, arg1)
}

// MockInstallHandler is a mock of InstallHandler interface
type MockInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInstallHandlerMockRecorder
}

// MockInstallHandlerMockRecorder is the mock recorder for MockInstallHandler
type MockInstallHandlerMockRecorder struct {
	mock *MockInstallHandler
}

// NewMockInstallHandler creates a new mock instance
func NewMockInstallHandler(ctrl *gomock.Controller) *MockInstallHandler {
	mock := &MockInstallHandler{ctrl: ctrl}
	mock.recorder = &MockInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallHandler) EXPECT() *MockInstallHandlerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInstallHandler) Install(arg0 context.Context, arg1 bool, arg2 *handlers.InstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallHandlerMockRecorder) Install(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstallHandler)(nil).Install), arg0, arg1, arg2)
}

// MockUninstallHandler is a mock of UninstallHandler interface
type MockUninstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUninstallHandlerMockRecorder
}

// MockUninstallHandlerMockRecorder is the mock recorder for MockUninstallHandler
type MockUninstallHandlerMockRecorder struct {
	mock *MockUninstallHandler
}

// NewMockUninstallHandler creates a new mock instance
func NewMockUninstallHandler(ctrl *gomock.Controller) *MockUninstallHandler {
	mock := &MockUninstallHandler{ctrl: ctrl}
	mock.recorder = &MockUninstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUninstallHandler) EXPECT() *MockUninstallHandlerMockRecorder {
	return m.recorder
}

// Uninstall mocks base method
func (m *MockUninstallHandler) Uninstall(arg0 context.Context, arg1 bool, arg2 *handlers.UninstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall
func (mr *MockUninstallHandlerMockRecorder) Uninstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockUninstallHandler)(nil).Uninstall), arg0, arg1, arg2)
}
