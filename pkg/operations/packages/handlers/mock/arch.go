// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/packages/handlers (interfaces: ArchPkgCheckInstallHandler,ArchPkgInstallHandler,ArchPkgUninstallHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/raba-jp/primus/pkg/operations/packages/handlers"
	reflect "reflect"
)

// MockArchPkgCheckInstallHandler is a mock of ArchPkgCheckInstallHandler interface
type MockArchPkgCheckInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockArchPkgCheckInstallHandlerMockRecorder
}

// MockArchPkgCheckInstallHandlerMockRecorder is the mock recorder for MockArchPkgCheckInstallHandler
type MockArchPkgCheckInstallHandlerMockRecorder struct {
	mock *MockArchPkgCheckInstallHandler
}

// NewMockArchPkgCheckInstallHandler creates a new mock instance
func NewMockArchPkgCheckInstallHandler(ctrl *gomock.Controller) *MockArchPkgCheckInstallHandler {
	mock := &MockArchPkgCheckInstallHandler{ctrl: ctrl}
	mock.recorder = &MockArchPkgCheckInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchPkgCheckInstallHandler) EXPECT() *MockArchPkgCheckInstallHandlerMockRecorder {
	return m.recorder
}

// CheckInstall mocks base method
func (m *MockArchPkgCheckInstallHandler) CheckInstall(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstall", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckInstall indicates an expected call of CheckInstall
func (mr *MockArchPkgCheckInstallHandlerMockRecorder) CheckInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstall", reflect.TypeOf((*MockArchPkgCheckInstallHandler)(nil).CheckInstall), arg0, arg1)
}

// MockArchPkgInstallHandler is a mock of ArchPkgInstallHandler interface
type MockArchPkgInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockArchPkgInstallHandlerMockRecorder
}

// MockArchPkgInstallHandlerMockRecorder is the mock recorder for MockArchPkgInstallHandler
type MockArchPkgInstallHandlerMockRecorder struct {
	mock *MockArchPkgInstallHandler
}

// NewMockArchPkgInstallHandler creates a new mock instance
func NewMockArchPkgInstallHandler(ctrl *gomock.Controller) *MockArchPkgInstallHandler {
	mock := &MockArchPkgInstallHandler{ctrl: ctrl}
	mock.recorder = &MockArchPkgInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchPkgInstallHandler) EXPECT() *MockArchPkgInstallHandlerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockArchPkgInstallHandler) Install(arg0 context.Context, arg1 bool, arg2 *handlers.ArchPkgInstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockArchPkgInstallHandlerMockRecorder) Install(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockArchPkgInstallHandler)(nil).Install), arg0, arg1, arg2)
}

// MockArchPkgUninstallHandler is a mock of ArchPkgUninstallHandler interface
type MockArchPkgUninstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockArchPkgUninstallHandlerMockRecorder
}

// MockArchPkgUninstallHandlerMockRecorder is the mock recorder for MockArchPkgUninstallHandler
type MockArchPkgUninstallHandlerMockRecorder struct {
	mock *MockArchPkgUninstallHandler
}

// NewMockArchPkgUninstallHandler creates a new mock instance
func NewMockArchPkgUninstallHandler(ctrl *gomock.Controller) *MockArchPkgUninstallHandler {
	mock := &MockArchPkgUninstallHandler{ctrl: ctrl}
	mock.recorder = &MockArchPkgUninstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchPkgUninstallHandler) EXPECT() *MockArchPkgUninstallHandlerMockRecorder {
	return m.recorder
}

// Uninstall mocks base method
func (m *MockArchPkgUninstallHandler) Uninstall(arg0 context.Context, arg1 bool, arg2 *handlers.ArchPkgUninstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall
func (mr *MockArchPkgUninstallHandlerMockRecorder) Uninstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockArchPkgUninstallHandler)(nil).Uninstall), arg0, arg1, arg2)
}
