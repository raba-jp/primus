// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/pkg/operations/packages/handlers (interfaces: DarwinPkgCheckInstallHandler,DarwinPkgInstallHandler,DarwinPkgUninstallHandler)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/raba-jp/primus/pkg/operations/packages/handlers"
	reflect "reflect"
)

// MockDarwinPkgCheckInstallHandler is a mock of DarwinPkgCheckInstallHandler interface
type MockDarwinPkgCheckInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDarwinPkgCheckInstallHandlerMockRecorder
}

// MockDarwinPkgCheckInstallHandlerMockRecorder is the mock recorder for MockDarwinPkgCheckInstallHandler
type MockDarwinPkgCheckInstallHandlerMockRecorder struct {
	mock *MockDarwinPkgCheckInstallHandler
}

// NewMockDarwinPkgCheckInstallHandler creates a new mock instance
func NewMockDarwinPkgCheckInstallHandler(ctrl *gomock.Controller) *MockDarwinPkgCheckInstallHandler {
	mock := &MockDarwinPkgCheckInstallHandler{ctrl: ctrl}
	mock.recorder = &MockDarwinPkgCheckInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDarwinPkgCheckInstallHandler) EXPECT() *MockDarwinPkgCheckInstallHandlerMockRecorder {
	return m.recorder
}

// CheckInstall mocks base method
func (m *MockDarwinPkgCheckInstallHandler) CheckInstall(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstall", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckInstall indicates an expected call of CheckInstall
func (mr *MockDarwinPkgCheckInstallHandlerMockRecorder) CheckInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstall", reflect.TypeOf((*MockDarwinPkgCheckInstallHandler)(nil).CheckInstall), arg0, arg1)
}

// MockDarwinPkgInstallHandler is a mock of DarwinPkgInstallHandler interface
type MockDarwinPkgInstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDarwinPkgInstallHandlerMockRecorder
}

// MockDarwinPkgInstallHandlerMockRecorder is the mock recorder for MockDarwinPkgInstallHandler
type MockDarwinPkgInstallHandlerMockRecorder struct {
	mock *MockDarwinPkgInstallHandler
}

// NewMockDarwinPkgInstallHandler creates a new mock instance
func NewMockDarwinPkgInstallHandler(ctrl *gomock.Controller) *MockDarwinPkgInstallHandler {
	mock := &MockDarwinPkgInstallHandler{ctrl: ctrl}
	mock.recorder = &MockDarwinPkgInstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDarwinPkgInstallHandler) EXPECT() *MockDarwinPkgInstallHandlerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockDarwinPkgInstallHandler) Install(arg0 context.Context, arg1 bool, arg2 *handlers.DarwinPkgInstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockDarwinPkgInstallHandlerMockRecorder) Install(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockDarwinPkgInstallHandler)(nil).Install), arg0, arg1, arg2)
}

// MockDarwinPkgUninstallHandler is a mock of DarwinPkgUninstallHandler interface
type MockDarwinPkgUninstallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDarwinPkgUninstallHandlerMockRecorder
}

// MockDarwinPkgUninstallHandlerMockRecorder is the mock recorder for MockDarwinPkgUninstallHandler
type MockDarwinPkgUninstallHandlerMockRecorder struct {
	mock *MockDarwinPkgUninstallHandler
}

// NewMockDarwinPkgUninstallHandler creates a new mock instance
func NewMockDarwinPkgUninstallHandler(ctrl *gomock.Controller) *MockDarwinPkgUninstallHandler {
	mock := &MockDarwinPkgUninstallHandler{ctrl: ctrl}
	mock.recorder = &MockDarwinPkgUninstallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDarwinPkgUninstallHandler) EXPECT() *MockDarwinPkgUninstallHandlerMockRecorder {
	return m.recorder
}

// Uninstall mocks base method
func (m *MockDarwinPkgUninstallHandler) Uninstall(arg0 context.Context, arg1 bool, arg2 *handlers.DarwinPkgUninstallParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall
func (mr *MockDarwinPkgUninstallHandlerMockRecorder) Uninstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockDarwinPkgUninstallHandler)(nil).Uninstall), arg0, arg1, arg2)
}
