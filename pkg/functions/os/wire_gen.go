// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package os

import (
	"github.com/raba-jp/primus/pkg/functions/command"
	"github.com/raba-jp/primus/pkg/modules"
	"go.starlark.net/starlark"
)

// Injectors from wire.go:

func NewArchFunctions() starlark.Value {
	execInterface := modules.NewExecInterface()
	executeRunner := command.Execute(execInterface)
	archInstalledRunner := ArchInstalled(executeRunner)
	executableRunner := command.Executable(execInterface)
	archInstallRunner := ArchInstall(executableRunner, executeRunner)
	archMultipleInstallRunner := ArchMultipleInstall(executableRunner, executeRunner)
	archUninstallRunner := ArchUninstall(executeRunner)
	value := newArchFunctions(archInstalledRunner, archInstallRunner, archMultipleInstallRunner, archUninstallRunner)
	return value
}

func NewDarwinFunctions() starlark.Value {
	execInterface := modules.NewExecInterface()
	executeRunner := command.Execute(execInterface)
	fs := modules.NewFs()
	darwinInstalledRunner := DarwinInstalled(executeRunner, fs)
	darwinInstallRunner := DarwinInstall(executeRunner, fs)
	darwinUninstallRunner := DarwinUninstall(executeRunner, fs)
	value := newDarwinFunctions(darwinInstalledRunner, darwinInstallRunner, darwinUninstallRunner)
	return value
}

func NewFilePathFunctions() starlark.Value {
	value := newFilePathFunctions()
	return value
}

// wire.go:

func newArchFunctions(
	installed ArchInstalledRunner,
	install ArchInstallRunner,
	multipleInstall ArchMultipleInstallRunner,
	uninstall ArchUninstallRunner,
) starlark.Value {
	dict := starlark.NewDict(4)
	dict.SetKey(starlark.String("installed"), starlark.NewBuiltin("installed", NewArchInstalledFunction(installed)))
	dict.SetKey(starlark.String("install"), starlark.NewBuiltin("install", NewArchInstallFunction(install)))
	dict.SetKey(starlark.String("multiple_install"), starlark.NewBuiltin("multiple_install", NewArchMultipleInstallFunction(multipleInstall)))
	dict.SetKey(starlark.String("uninstall"), starlark.NewBuiltin("uninstall", NewArchUninstallFunction(uninstall)))
	return dict
}

func newDarwinFunctions(
	installed DarwinInstalledRunner,
	install DarwinInstallRunner,
	uninstall DarwinUninstallRunner,
) starlark.Value {
	dict := starlark.NewDict(3)
	dict.SetKey(starlark.String("installed"), starlark.NewBuiltin("installed", NewDarwinInstalledFunction(installed)))
	dict.SetKey(starlark.String("install"), starlark.NewBuiltin("install", NewDarwinInstallFunction(install)))
	dict.SetKey(starlark.String("uninstall"), starlark.NewBuiltin("uninstall", NewDarwinUninstallFunction(uninstall)))
	return dict
}

func newFilePathFunctions() starlark.Value {
	dict := starlark.NewDict(3)
	dict.SetKey(starlark.String("get_current_path"), starlark.NewBuiltin("get_current_path", GetCurrentPath()))
	dict.SetKey(starlark.String("get_dir"), starlark.NewBuiltin("get_dir", GetDir()))
	dict.SetKey(starlark.String("join_path"), starlark.NewBuiltin("join_path", JoinPath()))
	return dict
}
