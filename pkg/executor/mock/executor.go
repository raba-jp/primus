// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/raba-jp/primus/executor (interfaces: Executor)

// Package mock_executor is a generated GoMock package.
package mock_executor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	executor "github.com/raba-jp/primus/pkg/executor"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Command mocks base method
func (m *MockExecutor) Command(arg0 context.Context, arg1 *executor.CommandParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command
func (mr *MockExecutorMockRecorder) Command(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockExecutor)(nil).Command), arg0, arg1)
}

// FileCopy mocks base method
func (m *MockExecutor) FileCopy(arg0 context.Context, arg1 *executor.FileCopyParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileCopy", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileCopy indicates an expected call of FileCopy
func (mr *MockExecutorMockRecorder) FileCopy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCopy", reflect.TypeOf((*MockExecutor)(nil).FileCopy), arg0, arg1)
}

// FileMove mocks base method
func (m *MockExecutor) FileMove(arg0 context.Context, arg1 *executor.FileMoveParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileMove", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileMove indicates an expected call of FileMove
func (mr *MockExecutorMockRecorder) FileMove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileMove", reflect.TypeOf((*MockExecutor)(nil).FileMove), arg0, arg1)
}

// HTTPRequest mocks base method
func (m *MockExecutor) HTTPRequest(arg0 context.Context, arg1 *executor.HTTPRequestParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRequest", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPRequest indicates an expected call of HTTPRequest
func (mr *MockExecutorMockRecorder) HTTPRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRequest", reflect.TypeOf((*MockExecutor)(nil).HTTPRequest), arg0, arg1)
}

// Package mocks base method
func (m *MockExecutor) Package(arg0 context.Context, arg1 *executor.PackageParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Package indicates an expected call of Package
func (mr *MockExecutorMockRecorder) Package(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*MockExecutor)(nil).Package), arg0, arg1)
}

// Symlink mocks base method
func (m *MockExecutor) Symlink(arg0 context.Context, arg1 *executor.SymlinkParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Symlink indicates an expected call of Symlink
func (mr *MockExecutorMockRecorder) Symlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockExecutor)(nil).Symlink), arg0, arg1)
}
